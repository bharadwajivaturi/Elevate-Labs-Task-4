# -*- coding: utf-8 -*-
"""restapi_flask

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1psYwmqGwVIIIUybtvsfFlZkqIJgVwGOb
"""

!pip install pyngrok flask
!pip install flask-ngrok pyngrok
from pyngrok import ngrok

from flask_ngrok import run_with_ngrok
from flask import Flask, request, jsonify
from pyngrok import ngrok

app = Flask(__name__)
run_with_ngrok(app)

users = {
    1: {"id": 1, "username": "bharadwajivaturi", "email": "bharadwajivaturi@gmail.com"},
    2: {"id": 2, "username": "sahasraivaturi", "email": "sahasraivaturi@gmail.com"}
}
user_id_counter = 3

@app.route('/users', methods=['GET'])
def get_users():
    return jsonify({
        "users": list(users.values()),
        "count": len(users)
    })

@app.route('/users/<int:user_id>', methods=['GET'])
def get_user(user_id):
    user = users.get(user_id)

    if not user:
        return jsonify({"error": "User not found"}), 404
    return jsonify(user)

@app.route('/users', methods=['POST'])
def create_user():
    global user_id_counter
    data = request.json

    if not data or 'username' not in data:
        return jsonify({"error": "Username is required"}), 400

    if any(u['username'] == data['username'] for u in users.values()):
        return jsonify({"error": "Username already exists"}), 409

    new_user = {
        "id": user_id_counter,
        "username": data['username'],
        "email": data.get('email', "")
    }
    users[user_id_counter] = new_user
    user_id_counter += 1
    return jsonify(new_user), 201

@app.route('/users/<int:user_id>', methods=['PUT'])
def update_user(user_id):
    user = users.get(user_id)

    if not user:
        return jsonify({"error": "User not found"}), 404

    data = request.json

    if not data:
        return jsonify({"error": "No data provided"}), 400

    if 'username' in data:
        if any(u['username'] == data['username'] for u in users.values() if u['id'] != user_id):
            return jsonify({"error": "Username already taken"}), 409
        user['username'] = data['username']

    if 'email' in data:
        user['email'] = data['email']
    return jsonify(user)

@app.route('/users/<int:user_id>', methods=['DELETE'])
def delete_user(user_id):
    if user_id not in users:
        return jsonify({"error": "User not found"}), 404

    del users[user_id]
    return jsonify({"message": "User deleted successfully"}), 200

@app.route('/')
def home():
    """Home endpoint with API information"""
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>User Management API</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; }
            h1 { color: #333; }
            ul { list-style-type: none; padding: 0; }
            li { margin: 10px 0; }
            a {
                display: inline-block;
                padding: 10px 15px;
                background-color: #000000;
                color: white;
                text-decoration: none;
                border-radius: 5px;
            }
            a:hover { background-color: #787878; }
            #usersList { margin-top: 20px; padding: 10px; border: 1px solid #ddd; }
        </style>
        <script>
            function fetchUsers() {
                fetch('/users')
                    .then(response => response.json())
                    .then(data => {
                        const usersList = document.getElementById('usersList');
                        usersList.innerHTML = '<h3>Users:</h3>';

                        if (data.users.length === 0) {
                            usersList.innerHTML += '<p>No users found</p>';
                            return;
                        }

                        const ul = document.createElement('ul');
                        data.users.forEach(user => {
                            const li = document.createElement('li');
                            li.innerHTML = `<strong>ID:</strong> ${user.id},
                                          <strong>Username:</strong> ${user.username},
                                          <strong>Email:</strong> ${user.email}`;
                            ul.appendChild(li);
                        });
                        usersList.appendChild(ul);
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            }
        </script>
    </head>
    <body>
        <h1>User Management API</h1>
        <p>Available endpoints:</p>
        <ul>
            <li><a href="javascript:void(0);" onclick="fetchUsers()">GET /users</a> - List all users</li>
            <li>GET /users/&lt;id&gt; - Get specific user</li>
            <li>POST /users - Create new user (requires username)</li>
            <li>PUT /users/&lt;id&gt; - Update user</li>
            <li>DELETE /users/&lt;id&gt; - Delete user</li>
        </ul>
        <div id="usersList"></div>
    </body>
    </html>
    """

ngrok.set_auth_token("30zyBQBi3tMl2gl7XtkNGhdCcxN_6w3p3X1dKe42WBKvygc3C")
public_url = ngrok.connect(5000).public_url
print("Public URL:", public_url)

if __name__ == '__main__':
    app.run()